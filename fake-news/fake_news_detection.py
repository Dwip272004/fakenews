# -*- coding: utf-8 -*-
"""fake news detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pF2tx0rsdQarEdSwzHElM1bD8u5qSFSa
"""

import pandas as pd
import numpy as np

true=pd.read_csv('/content/True_half.csv')
true.head()

fake=pd.read_csv('/content/Fake_half.csv')
fake.head()

true['label']=1
fake['label']=0

true.head()

fake.head()

news=pd.concat([true,fake],axis=0)
news.sample(5)

news.isnull().sum()

news=news.drop(['title','subject','date'],axis=1)
news.head()

news.reset_index(inplace=True)
news.head()

news.drop(['index'],axis=1,inplace=True)

news.head()

import re

def wordopt(content):
    content=content.lower()
    content=re.sub(r'https?://\S+|www\.\S+','',content)
    content=re.sub(r'<,*?>','',content)
    content=re.sub(r'[^\w\s]','',content)
    content=re.sub(r'\d','',content)
    content=re.sub(r'\n','',content)
    return content

news['content']=news['text'].apply(wordopt)

news['content']

x=news['text']
y=news['label']

x

y

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

x_train.shape

y_train.shape

from sklearn.feature_extraction.text import TfidfVectorizer

vectorization=TfidfVectorizer()

xv_train=vectorization.fit_transform(x_train)

xv_test=vectorization.transform(x_test)

xv_train

xv_test

from sklearn.linear_model import LogisticRegression

LR=LogisticRegression()

LR.fit(xv_train,y_train)

pred_lr=LR.predict(xv_test)

LR.score(xv_test,y_test)

from sklearn.metrics import classification_report
print(classification_report(y_test,pred_lr))

from sklearn.tree import DecisionTreeClassifier

DTC=DecisionTreeClassifier()

DTC.fit(xv_train,y_train)

pred_dtc=DTC.predict(xv_test)

DTC.score(xv_test,y_test)

print(classification_report(y_test,pred_dtc))

from sklearn.ensemble import RandomForestClassifier

rfc=RandomForestClassifier()

rfc.fit(xv_train,y_train)

predict_rfc=rfc.predict(xv_test)

rfc.score(xv_test,y_test)

print(classification_report(y_test,pred_dtc))

from sklearn.ensemble import GradientBoostingClassifier

gbc=GradientBoostingClassifier()

gbc.fit(xv_train,y_train)

pred_gbc=gbc.predict(xv_test)

gbc.score(xv_test,y_test)

print(classification_report(y_test,pred_gbc))

def output_label(n):
    if n==0:
        return "it is a fake news"
    elif n==1:
         return "it is true news"

def manual_testing(news):
    testing_news={"text":[news]}
    new_def_test=pd.DataFrame(testing_news)
    new_def_test["text"]=new_def_test["text"].apply(wordopt)
    new_x_test=new_def_test["text"]
    new_xv_test=vectorization.transform(new_x_test)
    pred_lr=LR.predict(new_xv_test)
    pred_gbc=gbc.predict(new_xv_test)
    pred_rfc=rfc.predict(new_xv_test)
    return "\n\nlr Prediction :{}\ngbc Prediction:{} \nrfc Prediction:{} ".format(output_label(pred_lr[0]),output_label(pred_gbc[0]),output_label(pred_rfc[0]))

news_article = input("Please enter the news article: ")
print("You entered: ", news_article)

manual_testing(news_article)

